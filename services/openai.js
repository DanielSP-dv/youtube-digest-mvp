const OpenAI = require('openai');

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

/**
 * Generates a summary for a given video transcript.
 * @param {string} transcript - The transcript of the video.
 * @returns {Promise<string>} - A promise that resolves to the summary text.
 */
async function generateSummary(transcript) {
  if (!transcript) {
    console.log('No transcript provided, skipping summary.');
    return null;
  }

  console.log('Generating summary for transcript...');

  try {
    const response = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: [
        {
          role: 'system',
          content: 'You are an expert at summarizing YouTube video transcripts. Create a concise, easy-to-read summary in two paragraphs. Focus on the main topics and key takeaways.'
        },
        {
          role: 'user',
          content: `Please summarize the following transcript:\n\n${transcript.substring(0, 4000)}` // Limit context to manage cost
        }
      ],
      temperature: 0.5,
      max_tokens: 256,
    });

    if (response.choices && response.choices.length > 0) {
      const summary = response.choices[0].message.content.trim();
      console.log('Summary generated successfully.');
      return summary;
    } else {
      throw new Error('No summary was generated by the API.');
    }
  } catch (error) {
    console.error('Error generating summary from OpenAI:', error);
    // Return null or re-throw depending on how the caller should handle it
    return null; 
  }
}

module.exports = { generateSummary };