// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  googleId      String   @unique
  email         String   @unique
  name          String
  picture       String?
  accessToken   String
  refreshToken  String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  channels      YouTubeChannel[]
  playlists     Playlist[]

  @@map("User")
}

model YouTubeChannel {
  id            String   @id @default(cuid())
  channelId     String   @unique
  userId        String
  name          String
  thumbnailUrl  String?
  customUrl     String?
  description   String?
  publishedAt   DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  videos        Video[]

  @@unique([channelId, userId])
  @@map("YouTubeChannel")
}

model Video {
  id            String   @id @default(cuid())
  videoId       String   @unique
  channelId     String
  title         String
  description   String?
  thumbnailUrl  String?
  publishedAt   DateTime?
  duration      Int?
  numberOfViews BigInt?
  transcript    String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  channel       YouTubeChannel @relation(fields: [channelId], references: [channelId], onDelete: Cascade)
  summary       VideoSummary?
  playlistVideos PlaylistVideo[]

  @@map("Video")
}

model VideoSummary {
  id                  String   @id @default(cuid())
  videoId             String   @unique
  summaryText         String
  chapters            String?  // JSON string
  readingTimeMinutes  Int?
  generatedAt         DateTime @default(now())
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  video               Video    @relation(fields: [videoId], references: [videoId], onDelete: Cascade)

  @@map("VideoSummary")
}

model Playlist {
  id        String   @id @default(cuid())
  userId    String
  name      String
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  videos    PlaylistVideo[]

  @@unique([userId, name])
  @@map("Playlist")
}

model PlaylistVideo {
  id         String   @id @default(cuid())
  playlistId String
  videoId    String
  addedAt    DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  video      Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([playlistId, videoId])
  @@map("PlaylistVideo")
}
